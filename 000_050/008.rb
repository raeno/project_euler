# frozen_string_literal: true

# Find the greatest product of five consecutive digits in the 1000-digit number
require 'test/unit'

class TestProblem_8 < Test::Unit::TestCase
  def find_greatest_product_of_five_consequtive_digits
    number =	'731671765313306249192251196744265747423553491949349698352031277450632623957831801698480186947885184
               385861560789112949495459501737958331952853208805511125406987471585238630507156932909632952274430435
               576689664895044524452316173185640309871112172238311362229893423380308135336276614282806444486645238
               749303589072962904915604407723907138105158593079608667017242712188399879790879227492190169972088809
               377665727333001053367881220235421809751254540594752243525849077116705560136048395864467063244157221
               553975369781797784617406495514929086256932197846862248283972241375657056057490261407972968652414535
               100474821663704844031998900088952434506585412275886668811642717147992444292823086346567481391912316
               282458617866458359124566529476545682848912883142607690042242190226710556263211111093705442175069416
               589604080719840385096245544436298123098787992724428490918884580156166097919133875499200524063689912
               560717606058861164671094050775410022569831552000559357297257163626956188267042825248360082325753042
               0752963450'

    number = number.gsub(/\n/, '')
    (0..number.length - 5).map { |i| number[i, 5].chars.map(&:to_i).reduce(&:*) }.max
  end

  def test_greatest_product_of_five_consequtive_digits_in_a_bignumber
    greatest_product = find_greatest_product_of_five_consequtive_digits
    assert_equal(40_824, greatest_product)
  end
end
